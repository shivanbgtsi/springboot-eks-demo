name: Release Versioning on Merge

on:
  push:
    branches:
      - main  # Change this to your default branch if it's different

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the current version
        id: get_version
        run: |
          # Attempt to get the latest version tag
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1 || echo "none")
          echo "Latest tag is: $LATEST_TAG"
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: determine_version
        run: |
          # Extract the version number
          VERSION=${{ steps.get_version.outputs.LATEST_TAG }}
          echo "latest version: $VERSION"
          # If there is no version yet, start at 1.0.0
          if [[ "$VERSION" == "" ]]; then
            NEW_VERSION="1.0.0"
            VERSION=$NEW_VERSION
            echo "No previous version found. Starting with version: $NEW_VERSION"
          else
            echo "Current version: $VERSION"
            # Split the version into major, minor, and patch
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            # Validate that MAJOR, MINOR, and PATCH are integers
            if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
              echo "Error: Current version is not valid."
              exit 1
            fi

            # Check if we are at the last patch version
            if [[ "$MINOR" -eq 0 && "$PATCH" -ge 9 ]]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi

            # Construct the new version without 'v'
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            echo "New version will be: $NEW_VERSION"
          fi
          echo "::set-output name=new_version::$NEW_VERSION"

      - name: Create a new tag
        run: |
          NEW_VERSION=${{ steps.determine_version.outputs.new_version }}
          echo "Creating tag: $NEW_VERSION"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create Release on GitHub
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_version.outputs.new_version }}
          release_name: Release ${{ steps.determine_version.outputs.new_version }}
          body: |
            Changes in this release:
            - Your changes here.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
